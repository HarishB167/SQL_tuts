Section 1 : Getting Started

- What is SQL
? Database
is a collection of data stored in a format that can easibly be
accessed.
? DBMS are used to manage data
Database Management System
? 2 categories of DBMS
Relational : Tables linked to each other, using relationships.
SQL - Structured Query Language
Ex - MySQL, SQL Server, Oracle
NoSQL : Don't have tables or relationships.
Don't understand SQL.

- Installing MySQL
? Create connection with local mysql as
Connection name : Local instance
Connection method : TCP/IP
Hostname : 127.0.0.1
Port : 3306
Username : root
Passwrod : <password>
Test the connection
? Restart mysql on Andronix
service mysql restart

- Creating the Databases
? Create database from script
? Each database has objects
Tables : where data is stored
Views : virtual tables (combine data from multiple tables
and put them in a view) (for creating reports)
Stored Procedures : Programs stored in database for querying data
Functions : Programs stored in database for querying data
? Every row in table is called record

- What you'll Learn
? 1st 4 sections
Retrieving, Inserting, Updating, Deleting Data
? 3 sections
Summarizing Data, Writing Complex Queries, Built-in Functions
? 2 sections
Views, Stored Procedures/Functions
? 4 sections
Triggers, Events, Transactions, Concurrency
? 1 section : Designing Databases
? 2 sections
Indexing for High performance
Securing Databases
----------------------------------------------------------------------

Section 2 : Retrieving data from a single table

- The SELECT statement
? Using a database - USE <dbname>;
? SELECT <column names, > FROM <table name>;
? Selecting all columns : SELECT * FROM <table name>;
? Commenting : prepend statement with '-- '
? Order of clauses : Select, From, Where, Order By, Limit

- The SELECT Clause
? All Columns : SELECT * ...
? Some columns : SELECT col1, col2, ...
? With arithmetic operation
SELECT col1, (col2 + 10) * 100 ...
? Arithmetic operaitons : +, -, *, /, %
? With alias :
SELECT col1, col2 + 10 AS discount_factor ... ; 
SELECT col1, col2 + 10 AS 'Discount Factor' ... ;
? Getting unique result
SELECT DISTINCT col1 ...;

- The WHERE Clause
? For filtering data
? WHERE col1 > 3000;
? WHERE state = 'VA';
? Date values : WHERE birth_date > '1990-01-01'
? Comparison operators : >, >=, <, <=, =, != or <>

- The And, Or, Not operators
? WHERE ... AND (... OR ...);
? WHERE ... OR ...;
? WHERE ... OR NOT ...
? WHERE NOT (... OR ...)

- The IN operator
? WHERE col1 IN (val1, val2, val3)
? WHERE col1 NOT IN (val1, val2, val3)

- The BETWEEN operator
? WHERE col1 BETWEEN val1 AND val3;
both values are inclusive.
? Can be used for date values. (YYYY-MM-DD)

- The LIKE operator
? Match a string pattern
? Case insensitive
? Old operator
? % - any number of chars.
? _ - any one character. : _y, b___y
? Starting with b : WHERE last_name LIKE 'b%';
? WHERE last_name LIKE '%b%';
? WHERE phone NOT LIKE '%9';

- The REGEXP operator
? Regular expressions
? Case insensitive
? field in name : WHERE last_name REGEXP 'field';
? ^ - beginning of string : ^field
? $ - end of string : field$
? | - or operator : field|mac
? ge/ie/me : '[gim]e'
? range : [a-h], [a-z] etc.

- The IS NULL operator
? WHERE col1 IS NULL
? WHERE col1 IS NOT NULL

- The ORDER BY Clause
? Sorting data in sql queries
? By default records are sorted by ID (it's primary key)
? SELECT * FROM table1 ORDER BY col1
? Descending : ORDER BY col1 DESC
? Multiple cols :
ORDER BY col1 DESC, col2
Main sort is of col1 then of col2.
? Can use expressions
ORDER BY col1 * col2 DESC
? In MySQL, columns not in select clause can be used in order by.
? Can sort by alias
SELECT col1, col2, col2+1 as alias FROM ...
ORDER BY alias
? Avoid sorting with column positions, and use column names.

- The LIMIT Clause
? Limiting no of records returned by query
? SELECT * FROM table1 LIMIT 3;
? Using offset 
Setting start of data
For pagination
SELECT * FROM table1 LIMIT <offset>, <records count>
SELECT * FROM table1 LIMIT 6, 3
? LIMIT clause always comes at end.
----------------------------------------------------------------------

Section 3 : Retrieving data from multiple tables

- Inner Joins
? SELECT * FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
? SELECT *, col_of_table1, col_of_table2 FROM table1
JOIN table2 ON table1.col1 = table2.col1
? table1 comes first in result.
? Getting one out of 2 custome_id
SELECT order_id, orders.customer_id
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
? Using Alias
SELECT order_id, o.customer_id
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
? 2 types of join : Inner (default) and Outer

- Joining Across Databases
? SELECT *
FROM table1
JOIN other_db.table2 tb2
ON table1.col1 = tb2.col1
? Access other database's tables by prefixing db name
db_name.table_name

- Self Joins
? When a column is linked to another column of same table
Manager as an employee in employee table, every employee has 
manager, so manager column contains employee id.
? Joining with self requires using aliases
? Every column requires alias, as they exist in both tables.
? SELECT e.employee_id, e.first_name, m.first_name AS manager
FROM employees e
JOIN employees m
ON e.reports_to = m.employee_id

- Compound Join Conditions
? For table having multiple primary key column (Composite primary key)
? SELECT *
FROM order_items oi
JOIN order_items_notes oin
    ON oi.order_id = oin.order_id
    AND oi.product_id = oin.product_id

- Implicit Join Syntax
? SELECT *
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
same as
SELECT *
FROM orders o, customers c
WHERE o.customer_id = c.customer_id
? This is NOT suggested to use.
As, fail to use WHERE clause will create cross join (All records of one
table with every record of another table).

- Outer Joins
? 2 types of outer joins : Left and Right
? Left outer join includes all rows of left table, irrespective of
condition.
? Right outer join includes all rows of right table, irrespective 
of condition.
? Outer keyword is optional :
left join : LEFT JOIN is same as LEFT OUTER JOIN
right join : RIGHT JOIN is same as RIGHT OUTER JOIN

- Outer joins between multiple tables
? SELECT *
FROM table1 t1
LEFT JOIN table2 t2 ON ...
LEFT JOIN table3 t3 ON ...
? Try to use only LEFT JOIN in multiple tables, to avoid confusion.

- Self Outer Joins
? Similar to inner self joins
? But includes all rows, with possilbe null opposition column

- The Using Clause
? When columns of table have same name
? SELECT ...
FROM table1 t1
JOIN table2 t2 USING (col1)
LEFT JOIN table3 t3 USING (col2, col3)

- Natural Joins
? DB engine automatically joins based on same column names.
? Easy to code, but dangerous, can produce unexpected result.
? Not recommended to use.
? SELECT ...
FROM table t
NATURAL JOIN table2 t2

- Cross Joins
? Join / map every record of one table with every record of
another table.
? Doesn't have condition
? SELECT ...
FROM table1 t1
CROSS JOIN table2 t2
? Use example - Combining table sizes with table colors.
? Using CROSS is explicit syntax, as it is more clear.
? Implicit syntax - using multiple tables in FROM clause
SELECT ... FROM table1, table2;

- Unions
? For joining rows (adding rows to result set).
? No of columns returned of both query should be same.
? Name of columns is based on first query.
? SELECT ...
FROM ... WHERE ...
UNION
SELECT ...
FROM ... WHERE ...
? Use example : combining table of orders and archieved orders, setting label column value conditionally for a table.
----------------------------------------------------------------------

Section 4 : Inserting, Updating and Deleting Data

- Column Attributes
* Datatype, Primary key, not null, auto increment, default/expression
* Datatype - int(n), varchar(50), char(n), date etc

- Inserting a single row
* INSERT INTO table
VALUES (DEFAULT, col2val, col3val, NULL/DEFAULT, ...)
* INSERT INTO table (col2, col3, ...)
VALUES (col2val, col3val, ...)

- Inserting Multiple Rows
* INSERT INTO table (cols, ...)
VALUES (colvals,...), (colvals,...), (colvals,...);

- Inserting Hierarchical Rows
* When a record depends on multiple table, order and order items. Id of created order is required to create order items.
* Id of last created record, getting it by built in function 
LAST_INSERT_ID()
* INSERT ... of parent record
INSERT INTO order_items (...)
VALUES (LAST_INSERT_ID(), colvals, ...),
    (LAST_INSERT_ID(), colvals, ...),
    (LAST_INSERT_ID(), colvals, ...)

- Creating a Copy of a table
* Using subquery : statement part of another statement.
* CREATE TABLE table1 AS
SELECT * FROM table2
* Primary key and auto increment information is not copied.
* Subquery in insert statement
INSERT INTO table1
SELECT *
FROM table2
WHERE ...some condition...
* Deleting data not table from table -> Truncate table.

- Updating a Single Row
* UPDATE table1
SET col1 = val1, col2 = val2
WHERE ...condition...
* value can be 
DEFAULT, NULL depending upon it is nullable or not.
calcuation on a column -> SET col1 = col2val * 0.5, ...

- Updating Multiple Rows
* Condition in WHERE clause is changed.
* UPDATE table1
SET col1 = val1, col2 = val2
WHERE ...condition...
* WHERE client_id IN (1,2,3,4)
* Updating all - leave WHERE clause.
* Mysql workbench runs in safe updatd mode and allows only update
of single record. Another client will work fine.
* Disabling safe updates -  Preferences > SQL Editor > Untick Safe updates > Reconnect to database.

- Using Subqueries in Updates
* In WHERE clause
* Getting id from db using name and then updating
* UPDATE table1
SET col1 = val1, col2 = val2
WHERE client_id = (SELECT client_id FROM clients
WHERE name = 'Myworks')
* UPDATE table1
SET col1 = val1, col2 = val2
WHERE client_id IN (SELECT client_id FROM clients
WHERE state IN ('CA', 'NY'))

- Deleting Rows
* All records delete : DELETE FROM table
* Using where clause to delete specific records
DELETE FROM table
WHERE ...condition...
----------------------------------------------------------------------

Section 5 : Summarizing Data

- Aggregating Functions
? For generating reports
? MAX, MIN, AVG, SUM, COUNT
? Can be applied on dates and strings
? Only operate on Non Null values
Count ignores null values
? Total records : COUNT(*)
? Can write expression as : SUM(col1 * 1.1) AS some_col
? Excluding duplicates : COUNT(DISTINCT client_id) AS ...

- The GROUP BY Clause
? Using aggreagating function also grouping based on a column. (Total sales per client)
? SELECT client_id, SUM(invoice_total) AS total_sales
FROM invoices
GROUP BY client_id
ORDER BY total_sales DESC
? Group by multiple columns
SELECT ...
FROM ...
JOIN clients USING (client_id)
GROUP BY state, city
We get each record for every combination of columns in 
Group By clause.
? When using GROUP BY, expression in SELECT should be
in GROUP BY clause,  contains aggregated column, or 
dependent upon a column in GROUPY BY clause.
? Standard practice : All columns in SELECT (except 
aggregated column) should be in GROUP BY clause.

- The HAVING Clause
? For filtering after GROUP BY
? Only variables/cols from SELECT statement can be used.
? In WHERE Clause groupby alias cannot be used. For filtering
before GROUP BY.
? SELECT client_id, SUM(...) AS total_sales
FROM ... GROUP BY ... 
HAVING total_sales > 500 AND condition2

- The ROLLUP operator
? Only availabe in MySQL
? Used with group by as
GROUP BY ... WITH ROLLUP
? Gets summary values for each group by combination.
? Alias cannot be used in GROUP BY when using ROLLUP
----------------------------------------------------------------------

Section 6 : Writing Complex Query

- Subqueries
? are select statement used inside another statement.
? SELECT * FROM table WHERE col > (SELECT ...)

- The IN Operator
? When subquery returns list of values
? SELECT * FROM ... WHERE ... NOT IN (SELECT ...)

- Subqueries vs Joins
? Sometimes a query can be written using both subqueries and 
joins
? SELECT * FROM clients
WHERE client_id NOT IN (SELECT DISTINCT client_id FROM invoices)
? SELECT * FROM clients
LEFT JOIN invoices USING (client_id)
WHERE invoice_id IS NULL
? Which to use depends on :
Performance and code readability
? When both queries has same performance then prefer
for most readable.
? Most of the time subquery option is more readable than join.

- The ALL Keyword
? "> (SELECT MAX(col) ...)" is equivalent to 
"> ALL (query returning list)"
? WHERE col <operator> ALL (query returning list)
? Returns true when condition is true for all items in 
subqueries list

- The ANY Keyword
? "IN" is equivalent to "= ANY".
? Returns true when condition is true for any one or more  
items in subqueries list

- Correlated Subqueries
? When subquery has reference to outer query.
? Using correlated subquery is slow, as subquery is called for 
every row.
? SELECT * FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees
    WHERE office_id = e.office_id)

- The EXISTS Operator
? Replacement of IN and JOIN
? Used when records are large in subquery, to increase 
performance.
? IN returns all records in subquery/JOIN then checks
? EXISTS checks for first occurence in subquery then 
immediately returns true.
? SELECT * FROM clients c
WHERE EXISTS (SELECT client_id FROM invoices WHERE
client_id = c.client_id)
? IN version
SELECT * FROM clients c
WHERE client_id IN  (SELECT client_id FROM invoices)

- Subqueries in the SELECT Clause
? Alias of subquery can be used in arithmetic expression in another subquery 
in select clause
? Using alias in SELECT statement using select clause
? SELECT col1, (SELCT AVG(col2) FROM table) AS alias1,
col3 - (SELECT alias1) AS alias2 FROM table

- Subqueries in the FROM Clause
? Subquery in from clause becomes a table input for from.
? SELECT ...
FROM (SELECT ...) AS table
WHERE ... ....
? Views can be used in FROM clause.
? Alias is required for subquery in FROM clause.
----------------------------------------------------------------------

Section 7 : Essential MySQL Functions

- Numeric Functions
* ROUND(number[, places])
number - number to round
places - digits after decimal
* TRUNCATE(number, places)
Removes the digits
* CEILING(number)
* FLOOR(number)
* ABS(number) : absolute value
* RAND() : random float number b/w 0 and 1.
* See complete list : search for mysql numeric functions

- String Functions
* LENGTH(string) : get no of chars
* UPPER(string) : convert to uppercase
* LOWER(string) : convert to lowercase
* Removing unnecessary spaces
LTRIM(string) : left side trim
RTRIM(string) : right side trim
TRIM(string) : both side trim
* LEFT(string, count)
Get count no of chars from left side of string.
* RIGHT(string, count)
Get count no of chars from right side of string.
* SUBSTRING(string, start[, length])
* LOCATE(searchstring, string) 
Gets position of string in another string.
Not case sensitive.
If not found returns 0.
* REPLACE(string, toreplace, replacewith)
* CONCAT(string1, string2, ...)
* See complete list : mysql string functions

- Date Functions
* NOW() : get current date and time
* CURDATE() : get current date only
* CURTIME() : get current time only
* YEAR(NOW()) : get current year from date time object
* MONTH(NOW())
* DAY(NOW()) : get current date
* HOUR(NOW()), MINUTE(NOW()), SECOND(NOW())
* DAYNAME(NOW()), MONTHNAME(NOW())
* EXTRACT(unit FROM NOW())
available in other db management systems
unit : YEAR, DAY, MONTH, SECOND etc

- Formatting Dates and Times
* DATE_FORMAT(dateTimeValue, 'format string')
format string : %y (2 digit year), %Y (4 digit year),
%m (2 digit month), %M (month name), %d (date)
* Reference : search mysql date format string
* TIME_FORMAT(dateTimeValue, 'format')
format : %H (hour), %i (minutes), %p (pm or am)

- Calculating Dates and Times
* DATE_ADD(NOW(), INTERVAL 1 DAY)
* DATE_SUB(NOW(), INTERVAL 1 DAY)
* DATEDIFF('2019-01-05', '2019-01-01') : returns difference in days
* TIME_TO_SEC('09:00')
returns no of seconds elapsed since midnight

- The IFNULL and COALESCE Functions
* IFNULL(val1, val2)
Substitute val1 with val2 if val1 is null
* COALESCE(val1, val2, ...)
Gets first non null value.
* Using in select statement on columns.

- The IF Function
* Conditionally returning values, (option for UNION)
* IF(expression, value_if_true, value_if_false)
* SELECT order_id, order_date, 
    IF(YEAR(order_date) = YEAR(NOW()), 'Active', 'Archived') AS category
FROM orders

- The CASE Operator
* When multiple conditions are required.
* SELECT order_id,
CASE
        WHEN YEAR(order_date) = YEAR(NOW()) THEN 'Active'
        WHEN YEAR(order_date) = YEAR(NOW()) - 1 THEN 'Last year'
        WHEN YEAR(order_date) < YEAR(NOW()) - 1 THEN 'Archived'
        ELSE '...'
END AS category
FROM orders
----------------------------------------------------------------------

Section 8 : Views

- Creating Views
? For saving complex queries in database (not data).
? CREATE VIEW view_name AS SELECT ...
? Stored in views folder in database
? View can be accessed similar to table
SELECT * FROM view_name ...
? Can be joined with other tables.
? Behave like virtual table. But not store data.

- Altering or Dropping Views
? Dropping
DROP VIEW view_name;
? Altering 
CREATE OR REPLACE  VIEW view_name AS SELECT ...
? Normally views creating statement are saved in file named by 
view name, and put in source control.

- Updatable Views
? Views can be used in update and delete statements
when view doesn't have - DISTINCT keyword, Aggregate
functions, Group by / Having, Union. And insert statement
also requires all required columns in the view.

- The WITH CHECK OPTION Clause
? To prevent updation of record through view, so that row
disappears from views result. Error is return when tried to do
so.
? Declare view as
CREATE OR REPLACE VIEW view_name AS
SELECT ... FROM ... WHERE ...
WITH CHECK OPTION

- Other Benefits of Views
? Simplify queries
? Reduce the impact of changes
Table can be changed. And view can access table and return data in same format as before (renaming column and joining 
splitted tables).
? Restrict access to the data - (exclude columns / filter rows)
----------------------------------------------------------------------

Section 9 : Stored Procedures

- What are Stored Procedures
? is a database object that contains a block of SQL code.
? In external application these procedures can be called to get
data.
? Store and organize SQL code
? Faster execution
? Data security - (remove direct access to table. Allow CUD 
operation by stored procedure. Set permissions on stored
procedure.)

- Creating a Stored Procedure
? DELIMETER change is required, because statements in
creating procedure need to be passed as single unit.
? Change delimeter as : DELIMITER <symbol to use>
? Creating procedure
DELIMITER $$
CREATE PROCEDURE get_clients()
BEGIN
    SELECT ...;
    SELECT ...;
    ...
END$$
DELIMITER ;
? Calling procedure
CALL <procedure_name>()

- Dropping Stored Procedures
? DROP PROCEDURE IF EXISTS <procedure_name>
? Good practice : to store code for creating and dropping
stored procedures in sql file and put in version control.

- Parameters
? To pass value to stored procedure
? To sent values to calling program
? CREATE PROCEDURE <prod_name>(state CHAR(2))
? Error is created when proper parameters are not passed.

- Parameters with Default value
? CREATE PROCEDURE ...
BEGIN
    IF param IS NULL THEN
        SET param = defautValue;
    END IF;
    SELECT ...
END$$
? For using default value, NULL is to be passed as parameter.
? Returning all when by default
...
BEGIN
    IF param IS NULL THEN
       SELECT.. return all...
    ELSE
       SELECT with param filter
    END IF;
END$$
> Another way
...
BEGIN
   SELECT * FROM table t
   WHERE t.col = IFNULL(param, t.col);
END$$

- Parameter Validation
? Error codes : search sqlstate errors > ibm site
? Error can be generated during validation.
? CREATE PROCEDURE ...
BEGIN
     IF ...condition... THEN
         SIGNAL SQLSTATE '<error code>'
             SET MESSAGE_TEXT = '<message>';
     END IF;

     UPDATE table t
     SET t.col = val
     WHERE t.id = id;
END
? Only absolute essential validation need to be done in SQL.
? Other validation to be done by application using database.

- Output parameters
? SELECT ... INTO ... FROM ... statement is used
? CREATE PROCEDURE <prod_name>(
   param1 INT, OUT outparam1 INT, OUT outparam2 INT)
BEGIN
      SELECT val1, val2
      INTO outparam, outparam
      FROM ...
END
? User defined variables in SQL
set @var1 = val;
? Avoid using output parameters as much possible.

- Variables
? Variables remain in memory during entire client session
? Variables a freed up when client disconnects.
? Called as user / session variables
? Defined as
SET @val_name = 0;
? Local variable : variable defined in stored procedure or function.
Freed up after execution of procedure/function.
> Declared as : DECLARE var1 DECIMAL(9,2) [DEFAULT 0];
> Set as : SET var1 = val;

- Functions
? Function can only return single value.
? Function should have atleast one attribute
DETERMINISTIC : always outputs same for same input
READS SQL DATA : will read data, select statement
MODIFIES SQL DATA : will modify data (insert, update or delete)
? CREATE FUNCTION <func_name>(params...)
RETURNS INTEGER
<Function Attributes>
BEGIN
    ...
    RETURN val;
END
? Function can be used in SQL statements.
? Dropping function
DROP FUNCTION IF EXISTS <func_name>;

- Other Conventions
? prefixing
functions : fn_
stored procedure : proc_, procFuncName
no prefixing
? Delimieter : $$, //
? Stick to already used conventions in a project, for new project one can use other conventions.
-------------------------------------------------------------------------------

Section 10 : Triggers and Events

- Triggers
* A block of SQL code that automatically gets executed
before or after an insert, update or delete statement.
* Used to enforce data consistency.
Updating payment_total in invoices when a payment occurs.
* Naming trigger : tablename_(after/before)_action
action - insert/update/delete
* In triggers only tables other than triggering table can be modified.
Because changing same table will make trigger fire itself, 
causing infinite loop.
* NEW keyword : last row inserted
* OLD keyword : last row updated/deleted
* DELIMITER $$
CREATE TRIGGER payments_after_insert
    AFTER INSERT ON payments
    FOR EACH ROW
BEGIN
    UPDATE invoices
    SET payment_total = payment_total + NEW.amount
    WHERE invoice_id = NEW.invoice_id;
END$$
DELIMITER ;
* FOR EACH ROW - trigger is fired for each row
* Some dbms supports table level triggers - fired only once
(when bulk insert/update/delete happens).

- Viewing Triggers
* SHOW TRIGGERS
* Filtering for table
SHOW TRIGGERS LIKE 'table%'

- Dropping Triggers
* DROP TRIGGER IF EXISTS trigger_name

- Using Triggers for Auditing
* Logging changes to data for auditing
Logging insertion/deletion of record (in a table)
* Create a table for logging changes as
USE sql_invoicing;
CREATE TABLE payments_audit( client_id INT NOT NULL,
date DATE NOT NULL, amount DECIMAL(9,2) NOT NULL,
action_type VARCHAR(50) NOT NULL,
action_date DATETIME NOT NULL)
* Change triggers as
BEGIN
    ...
    INSERT INTO payments_audit
    VALUES (NEW.client_id, NEW.date, NEW.amount, 'Insert', NOW());
END $$ 
For deletion change NEW to OLD and Insert to Delete.
* In real applications, general structure of table for logging changes
is created, so changes of all tables can be logged.

- Events
* A task (or block of SQL code) that gets executed according to a 
schedule.
* Automate db maintenance tasks (Deleting stale data, copying data
from a table to archieve table, aggregating data to generate reports)
* Turn on MySQL Event scheduler
Process running in background, looking for events to run.
View all system variables in mysql : SHOW VARIABLES;
Turn on event scheduler : SET GLOBAL event_scheduler = ON;
* Creating event
interval : once, yearly, monthly, hourly, daily etc.
DELIMITER $$
CREATE EVENT <interval>_delete_stale_audit_rows
ON SCHEDULE
    --- once : AT '2019-05-01'
    EVERY 1 HOUR [START '2019-01-01'] [END '2029-01-01']
DO BEGIN
    DELETE FROM payments_audit
    WHERE action_date < NOW() - INTERVAL 1 YEAR;
END $$
DELIMITER ;

- Viewing, Dropping and Altering Events
* View : SHOW EVENTS [LIKE 'pattern'];
* Drop : DROP EVENTS IF EXISTS event_name;
* Alter : Copy CREATE EVENT statement, replace CREATE with ALTER
> Templorarily disable/enable event
ALTER EVENT event_name DISABLE/ENABLE;
















