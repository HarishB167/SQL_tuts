Section 1 : Getting Started

- What is SQL
? Database
is a collection of data stored in a format that can easibly be
accessed.
? DBMS are used to manage data
Database Management System
? 2 categories of DBMS
Relational : Tables linked to each other, using relationships.
SQL - Structured Query Language
Ex - MySQL, SQL Server, Oracle
NoSQL : Don't have tables or relationships.
Don't understand SQL.

- Installing MySQL
? Create connection with local mysql as
Connection name : Local instance
Connection method : TCP/IP
Hostname : 127.0.0.1
Port : 3306
Username : root
Passwrod : <password>
Test the connection
? Restart mysql on Andronix
service mysql restart

- Creating the Databases
? Create database from script
? Each database has objects
Tables : where data is stored
Views : virtual tables (combine data from multiple tables
and put them in a view) (for creating reports)
Stored Procedures : Programs stored in database for querying data
Functions : Programs stored in database for querying data
? Every row in table is called record

- What you'll Learn
? 1st 4 sections
Retrieving, Inserting, Updating, Deleting Data
? 3 sections
Summarizing Data, Writing Complex Queries, Built-in Functions
? 2 sections
Views, Stored Procedures/Functions
? 4 sections
Triggers, Events, Transactions, Concurrency
? 1 section : Designing Databases
? 2 sections
Indexing for High performance
Securing Databases
----------------------------------------------------------------------

Section 2 : Retrieving data from a single table

- The SELECT statement
? Using a database - USE <dbname>;
? SELECT <column names, > FROM <table name>;
? Selecting all columns : SELECT * FROM <table name>;
? Commenting : prepend statement with '-- '
? Order of clauses : Select, From, Where, Order By, Limit

- The SELECT Clause
? All Columns : SELECT * ...
? Some columns : SELECT col1, col2, ...
? With arithmetic operation
SELECT col1, (col2 + 10) * 100 ...
? Arithmetic operaitons : +, -, *, /, %
? With alias :
SELECT col1, col2 + 10 AS discount_factor ... ; 
SELECT col1, col2 + 10 AS 'Discount Factor' ... ;
? Getting unique result
SELECT DISTINCT col1 ...;

- The WHERE Clause
? For filtering data
? WHERE col1 > 3000;
? WHERE state = 'VA';
? Date values : WHERE birth_date > '1990-01-01'
? Comparison operators : >, >=, <, <=, =, != or <>

- The And, Or, Not operators
? WHERE ... AND (... OR ...);
? WHERE ... OR ...;
? WHERE ... OR NOT ...
? WHERE NOT (... OR ...)

- The IN operator
? WHERE col1 IN (val1, val2, val3)
? WHERE col1 NOT IN (val1, val2, val3)

- The BETWEEN operator
? WHERE col1 BETWEEN val1 AND val3;
both values are inclusive.
? Can be used for date values. (YYYY-MM-DD)

- The LIKE operator
? Match a string pattern
? Case insensitive
? Old operator
? % - any number of chars.
? _ - any one character. : _y, b___y
? Starting with b : WHERE last_name LIKE 'b%';
? WHERE last_name LIKE '%b%';
? WHERE phone NOT LIKE '%9';

- The REGEXP operator
? Regular expressions
? Case insensitive
? field in name : WHERE last_name REGEXP 'field';
? ^ - beginning of string : ^field
? $ - end of string : field$
? | - or operator : field|mac
? ge/ie/me : '[gim]e'
? range : [a-h], [a-z] etc.

- The IS NULL operator
? WHERE col1 IS NULL
? WHERE col1 IS NOT NULL

- The ORDER BY Clause
? Sorting data in sql queries
? By default records are sorted by ID (it's primary key)
? SELECT * FROM table1 ORDER BY col1
? Descending : ORDER BY col1 DESC
? Multiple cols :
ORDER BY col1 DESC, col2
Main sort is of col1 then of col2.
? Can use expressions
ORDER BY col1 * col2 DESC
? In MySQL, columns not in select clause can be used in order by.
? Can sort by alias
SELECT col1, col2, col2+1 as alias FROM ...
ORDER BY alias
? Avoid sorting with column positions, and use column names.

- The LIMIT Clause
? Limiting no of records returned by query
? SELECT * FROM table1 LIMIT 3;
? Using offset 
Setting start of data
For pagination
SELECT * FROM table1 LIMIT <offset>, <records count>
SELECT * FROM table1 LIMIT 6, 3
? LIMIT clause always comes at end.
----------------------------------------------------------------------

Section 3 : Retrieving data from multiple tables

- Inner Joins
? SELECT * FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
? SELECT *, col_of_table1, col_of_table2 FROM table1
JOIN table2 ON table1.col1 = table2.col1
? table1 comes first in result.
? Getting one out of 2 custome_id
SELECT order_id, orders.customer_id
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
? Using Alias
SELECT order_id, o.customer_id
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
? 2 types of join : Inner (default) and Outer

- Joining Across Databases
? SELECT *
FROM table1
JOIN other_db.table2 tb2
ON table1.col1 = tb2.col1
? Access other database's tables by prefixing db name
db_name.table_name

- Self Joins
? When a column is linked to another column of same table
Manager as an employee in employee table, every employee has 
manager, so manager column contains employee id.
? Joining with self requires using aliases
? Every column requires alias, as they exist in both tables.
? SELECT e.employee_id, e.first_name, m.first_name AS manager
FROM employees e
JOIN employees m
ON e.reports_to = m.employee_id

- Compound Join Conditions
? For table having multiple primary key column (Composite primary key)
? SELECT *
FROM order_items oi
JOIN order_items_notes oin
    ON oi.order_id = oin.order_id
    AND oi.product_id = oin.product_id

- Implicit Join Syntax
? SELECT *
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
same as
SELECT *
FROM orders o, customers c
WHERE o.customer_id = c.customer_id
? This is NOT suggested to use.
As, fail to use WHERE clause will create cross join (All records of one
table with every record of another table).

- Outer Joins
? 2 types of outer joins : Left and Right
? Left outer join includes all rows of left table, irrespective of
condition.
? Right outer join includes all rows of right table, irrespective 
of condition.
? Outer keyword is optional :
left join : LEFT JOIN is same as LEFT OUTER JOIN
right join : RIGHT JOIN is same as RIGHT OUTER JOIN

- Outer joins between multiple tables
? SELECT *
FROM table1 t1
LEFT JOIN table2 t2 ON ...
LEFT JOIN table3 t3 ON ...
? Try to use only LEFT JOIN in multiple tables, to avoid confusion.

- Self Outer Joins
? Similar to inner self joins
? But includes all rows, with possilbe null opposition column

- The Using Clause
? When columns of table have same name
? SELECT ...
FROM table1 t1
JOIN table2 t2 USING (col1)
LEFT JOIN table3 t3 USING (col2, col3)

- Natural Joins
? DB engine automatically joins based on same column names.
? Easy to code, but dangerous, can produce unexpected result.
? Not recommended to use.
? SELECT ...
FROM table t
NATURAL JOIN table2 t2

- Cross Joins
? Join / map every record of one table with every record of
another table.
? Doesn't have condition
? SELECT ...
FROM table1 t1
CROSS JOIN table2 t2
? Use example - Combining table sizes with table colors.
? Using CROSS is explicit syntax, as it is more clear.
? Implicit syntax - using multiple tables in FROM clause
SELECT ... FROM table1, table2;

- Unions
? For joining rows (adding rows to result set).
? No of columns returned of both query should be same.
? Name of columns is based on first query.
? SELECT ...
FROM ... WHERE ...
UNION
SELECT ...
FROM ... WHERE ...
? Use example : combining table of orders and archieved orders, setting label column value conditionally for a table.










